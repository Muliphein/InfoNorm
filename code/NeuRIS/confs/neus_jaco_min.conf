general {
    dataset_type = indoor # only indoor
    base_exp_dir =  ./exp/CASE_NAME/SPLIT_NAME/neus_jaco_min    # exp dir format: base_exp_dir/dataset_type/scan_name/exp_name
    data_dir = ../../dataset/processored/CASE_NAME/
    recording = [
        ./,
        ./models
    ]
    recording_file = [
        ../../dataset/processored/CASE_NAME/SPLIT_NAME,
    ]
}

dataset {
    split_name = SPLIT_NAME
    load_dino = True
    jaco_info = combine_double_min

    denoise_gray_image = True  # denoise gray image
    denoise_paras = [7, 21, 10, 10]
    
    # patch-match
    patchmatch_start = 6e4
    patchmatch_mode = use_geocheck
    patchmatch_thres_ncc_robust = 0.66 
    check_occlusion = True

    mode_init_accum = model  # model/npz
    init_accum_reso_level = 4
    init_accum_step_npz = 6e4
    
    sample_range_indoor = 2.0
    
    bbox_size_half = 1.0
    sphere_radius = 1.0
    resolution_level = 1.0

    estimate_scale_mat = False
    cache_all_data = False
    mask_out_image = False

    jacobi_pos_threshold = 0.8
    dino_min = 0.65
    normal_min = 0.990

}

train {
    batch_size = 512

    learning_rate = 2e-4
    learning_rate_milestone = [ 100000, 150000, 200000 ]
    learning_rate_factor = 0.5
    end_iter = 160000

    save_freq = 20000
    val_image_freq = 2000
    save_normamap_npz = False #for patch-match validation
    val_mesh_freq  = 5000
    val_depth_freq = 1000000
    val_fields_freq = 1000000
    freq_valid_points = 100
    freq_valid_weights = 500000
    freq_save_confidence = 2000000
    report_freq = 1000

    validate_resolution_level = 2
    anneal_start = 0
    anneal_end = 25000
    use_white_bkgd = False

    warm_up_end = 5000
    learning_rate_alpha = 0.05
}

model {
    tiny_nerf {
        D = 8,
        d_in = 4,
        d_in_view = 3,
        W = 256,
        multires = 10,
        multires_view = 4,
        output_ch = 4,
        skips=[4],
        use_viewdirs=True,
    }

    nerf {
        D = 8,
        d_in = 3,
        d_in_view = 3,
        W = 256,
        multires = 10,
        multires_view = 4,
        output_ch = 4,
        skips=[4],
        use_viewdirs=True,
    }

    sdf_network {
        bias = 0.6,

        #network
        d_out = 256, # 1(sdf) 256(feature) 
        d_sdf = 1,
        d_in = 3,
        d_hidden = 256,
        n_layers = 8,
        skip_in = [4],
        scale = 1.0,
        geometric_init = True,
        reverse_geoinit = False,   # for indoor data
        weight_norm = True,
        activation = softplus,
        dn_dp_type = single,
        batch_size = 65536,

        # embedding
        multires = 6,
        use_emb_c2f = False,
        emb_c2f_start = 0.1,
        emb_c2f_end = 0.5,
    }

    variance_network {
        init_val = 0.3,
        use_fixed_variance = False,
    }

    rendering_network {
        d_feature = 256,
        mode = idr,  # no_view_dir / idr
        d_in = 9,    # 6 / 9
        d_out = 3,
        d_hidden = 256,
        n_layers = 4,
        weight_norm = True,
        multires_view = 4,
        squeeze_out = True,
        feature_level = 2,
    }

    neus_renderer {
        # for neus rendering
        n_samples = 64,
        n_importance = 64,
        n_outside = 0,
        perturb = 1.0,
        alpha_type = div,
        use_dn_dp = True,
        feature_from = sdf,
    }

    loss {
        # Loss
        color_weight = 1.0,
        igr_weight = 0.1,
        mask_weight = 0.0,
        smooth_weight = 0.0,

        # depth and normal priors
        depth_weight = 0.0,
        normal_weight = 0.0,

        # plane priors
        plane_loss_milestone = 1e5,
        normal_consistency_weight = 0.0,
        manhattan_constrain_weight = 0.0,
        plane_offset_weight = 0.0,

        warm_up_start = 0, # for normal consistency and smooth loss
        warm_up_end = 2e4,
        
        jacobi_type = vector,
        jacobi_contrastive_weight = 0.1,
        jacobi_gradient_weight = 0.0,
        jacobi_pos_threshold = 0.985,
        jacobi_start = 0,
        jacobi_end = 1e9,
    }
}